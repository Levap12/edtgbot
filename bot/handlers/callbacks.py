from aiogram import F, Router, types, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile
from bot.keyboards import user_keyboards
from aiogram.filters import CommandStart
import os
from bot.utils import marzhapi
import asyncio
callback_router = Router()
from bot.utils.base64coding import encode
from dotenv import load_dotenv

import logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv('../.env')
SUB_URL = os.getenv("SUB_URL")
TOKEN = os.getenv("TOKEN_TG")
bot = Bot(token=TOKEN)

# @callback_router.callback_query(F.data == 'first_connect')
# async def first_connect(callback: CallbackQuery):
#     link = await marzhapi.crate_trial(callback.from_user.id)
#     text = 'ü™ê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Vless:' \
#            '\n' \
#            f'\n<code>{link}</code>' \
#            '\nüëÜ –ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å!'
#
#     await callback.message.edit_text(text=text, reply_markup=user_keyboards.get_firstmsg_kb(), parse_mode='HTML')

user_last_interaction = {}
async def handle_message_edit(callback: CallbackQuery, new_text: str, new_reply_markup):
    user_id = callback.from_user.id
    current_time = asyncio.get_event_loop().time()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    if user_id in user_last_interaction:
        last_time = user_last_interaction[user_id]
        if current_time - last_time < .5:  # –ù–∞–ø—Ä–∏–º–µ—Ä, 1 —Å–µ–∫—É–Ω–¥–∞
            await callback.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º.")
            return

    user_last_interaction[user_id] = current_time

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –µ–≥–æ —Ä–∞–∑–º–µ—Ç–∫–∞
    if callback.message.text != new_text or callback.message.reply_markup != new_reply_markup:
        await callback.message.edit_text(text=new_text, reply_markup=new_reply_markup, parse_mode='HTML', disable_web_page_preview=True)
    else:
        await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@callback_router.message(CommandStart())
async def cmd_start(message: types.Message):
    try:
        # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é (file_id)
        image_path = "AgACAgQAAxkBAAIBamdU23ZiPgSLkqOIZrRXLYXBznSnAAJ-xjEb8PmgUo683NEpncO2AQADAgADeQADNgQ"

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_path} —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.")

        create_user_result = await marzhapi.crate_user(message.from_user.id)  # —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–Ω–µ–ª–µ VPN
        if create_user_result['status'] == 'ok':
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
            group_message = (
                f'üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è!\n'
                f'–ò–º—è: {message.from_user.first_name}\n'
                f'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}\n'
                f'Username: @{message.from_user.username}'
            )
            await bot.send_message(chat_id=-1002286289168, text=group_message)
        text = '<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VOX VPN!</b>' \
               '\n\n–ú—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –≤—ã—Å–æ–∫—É—é —Å–∫–æ—Ä–æ—Å—Ç—å!' \
               '\n\n–ê –≥–ª–∞–≤–Ω–æ–µ ‚Äì –Ω–∞—à VPN –æ—Ç–ª–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ, —Ç–∞–∫ –∏ –Ω–∞ –ü–ö.' \
               '\n\n–ü–æ–≥–Ω–∞–ª–∏!' \
               '\n\n<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b> @voxwork' \
               '\n<b>–ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª</b> @voxglobal' \
               '\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º,' \
               '\n–ö–æ–º–∞–Ω–¥–∞ VOX VPN ‚ö°Ô∏è'
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer_photo(photo=image_path, caption=text, reply_markup=user_keyboards.main_menu(), parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@callback_router.callback_query(F.data.in_(['buyvpn', 'chose_device','back_to_menu']))
async def handle_button_click(callback: types.CallbackQuery):
    try:
        action = callback.data
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ: {action}")

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()

        # –õ–æ–≥–∏—Ä—É–µ–º, –∫–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        if action == 'buyvpn':
            image_path = "AgACAgQAAxkBAAIBamdU23ZiPgSLkqOIZrRXLYXBznSnAAJ-xjEb8PmgUo683NEpncO2AQADAgADeQADNgQ"
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_path} —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏ VPN.")
            await callback.message.answer_photo(photo=image_path, reply_markup=user_keyboards.get_buyvpn_kb())
        elif action == 'chose_device':
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ VPN.")

            text = f'{callback.from_user.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∏–∂–µ üëá —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é'
            await callback.message.answer(text=text, reply_markup=user_keyboards.get_chose_device_kb())
        elif action == 'back_to_menu':
            image_path = "AgACAgQAAxkBAAIBamdU23ZiPgSLkqOIZrRXLYXBznSnAAJ-xjEb8PmgUo683NEpncO2AQADAgADeQADNgQ"
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é.")
            text = '<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VOX VPN!</b>' \
                   '\n\n–ú—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –≤—ã—Å–æ–∫—É—é —Å–∫–æ—Ä–æ—Å—Ç—å!' \
                   '\n\n–ê –≥–ª–∞–≤–Ω–æ–µ ‚Äì –Ω–∞—à VPN –æ—Ç–ª–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ, —Ç–∞–∫ –∏ –Ω–∞ –ü–ö.' \
                   '\n\n–ü–æ–≥–Ω–∞–ª–∏!' \
                   '\n\n<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b> @voxwork' \
                   '\n<b>–ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª</b> @voxglobal' \
                   '\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º,' \
                   '\n–ö–æ–º–∞–Ω–¥–∞ VOX VPN ‚ö°Ô∏è'
            await callback.message.answer_photo(photo=image_path, caption=text, reply_markup=user_keyboards.main_menu(), parse_mode="HTML")

        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        # await callback.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {action}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")

# @callback_router.callback_query(F.data == 'profile')
# async def profile_cb(callback: CallbackQuery):
#     user_info = await marzhapi.get_user_info(callback.from_user.id)
#
#     if user_info["subscription_status"] == 'active':
#         sub_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞"
#     elif user_info["subscription_status"] == 'disabled' or 'expired':
#         sub_status = "‚ùå –ù–µ –∞–∫—Ç–∏–≤–Ω–∞"
#
#     else:
#         sub_status = "‚ùì –ù–µ–∏–∑–≤–µ—Ç—Å–Ω–∞ –æ—à–∏–±–∫–∞"
#
#     text = f'<b>–ü–æ–¥–ø–∏—Å–∫–∞: {sub_status}</b>\n' \
#            f'‚îú ID: {callback.from_user.id}\n' \
#            f'‚îú –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {user_info["remaining_days"]}\n' \
#            f'‚îî –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ: {user_info["expire_date"]}'#‚îú‚îî
#
#     await handle_message_edit(callback, text, user_keyboards.get_profile_kb())


# @callback_router.callback_query(F.data == 'back_to_menu')
# async def back_to_main_cb(callback: CallbackQuery):
#     main_menu = 'Nock VPN ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –¥–ª—è –≤–∞—à–µ–π –æ–Ω–ª–∞–π–Ω-–∂–∏–∑–Ω–∏.\n' \
#                 '\n' \
#                 'üî• –ü—Ä–∏–æ–±—Ä–µ—Ç–∞–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É Nock VPN –æ—Ç 190‚ÇΩ\n' \
#                 '\n' \
#                 '‚ö°Ô∏è –ü–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å –∫ VPN, –∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–∫–ª—é—á–∏—Ç—Å—è¬ª\n' \
#                 '\n' \
#                 '–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º —Å–ª–µ–¥—É—é—â–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏:'
#
#     await handle_message_edit(callback, main_menu, user_keyboards.get_main_kb())


# @callback_router.callback_query(F.data == 'buyvpn')
# async def buyvpn_cb(callback: CallbackQuery):
#     text = '–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —Ç–∞—Ä–∏—Ñ:' \
#            '\n\n190‚ÇΩ / 1 –º–µ—Å' \
#            '\n500‚ÇΩ / 3 –º–µ—Å' \
#            '\n900‚ÇΩ / 6 –º–µ—Å' \
#            '\n\nüí≥ –ö –æ–ø–ª–∞—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –∫–∞—Ä—Ç—ã –†–§:' \
#            '\nVisa, MasterCard, –ú–ò–† –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.'
#
#
#     await handle_message_edit(callback, text, user_keyboards.get_buyvpn_kb())
#

async def handle_subscription(callback: CallbackQuery, months: int):
    user_id = callback.from_user.id
    await callback.message.delete()
    logger.info(f"–§—É–Ω–∫—Ü–∏—è handle_subscription")
    if months == 1:
        month_text = "–º–µ—Å—è—Ü"
    elif 2 <= months <= 4:
        month_text = "–º–µ—Å—è—Ü–∞"
    else:
        month_text = "–º–µ—Å—è—Ü–µ–≤"

    text = f'‚ÑπÔ∏è –î–æ—Å—Ç—É–ø –Ω–∞ {months} {month_text}.'
    payment_link = "https://t.me/nyrpeisov"
    await callback.message.answer(text=text, reply_markup=user_keyboards.get_payment_kb(payment_link, None))



    # await handle_message_edit(callback, text, user_keyboards.get_payment_kb(months, payment_link, None))
    # payment_link, error = await create_payment(user_id, months)
    # if payment_link:
    #     text = f'–î–æ—Å—Ç—É–ø –Ω–∞ {months} {month_text}'
    #     crypto_payment_url = f'https://crypto-payment.example.com/{months}_months'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    #     await handle_message_edit(callback, text, user_keyboards.get_payment_kb(months, payment_link, crypto_payment_url))
    # else:
    #     await callback.message.answer(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏: {error}")
    # await callback.message.answer(f'–î–ª—è –æ–ø–ª–∞—Ç—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ <a href="https://t.me/NockVPN_support">–ø–æ–¥–¥–µ—Ä–∂–∫—É</a>', parse_mode='HTML')

@callback_router.callback_query(F.data.startswith('test_payment_'))
async def test_payment_cb(callback: CallbackQuery):
    months = int(callback.data.split('_')[-1])
    if months == 1:
        month_text = "–º–µ—Å—è—Ü"
    elif months == 3:
        month_text = "–º–µ—Å—è—Ü–∞"
    elif months == 6:
        month_text = "–º–µ—Å—è—Ü–µ–≤"
    else:
        month_text = "–º–µ—Å—è—Ü–µ–≤"

    await marzhapi.extend_expire(callback.from_user.id,months)

    text = f'–û–ø–ª–∞—Ç–∞ –∑–∞ {months} {month_text} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É.'
    await handle_message_edit(callback, text, user_keyboards.get_mainmenu_kb())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@callback_router.callback_query(F.data == 'buyvpn_1')
async def buyvpn_1_cb(callback: CallbackQuery):
    await handle_subscription(callback, 1)

@callback_router.callback_query(F.data == 'buyvpn_3')
async def buyvpn_3_cb(callback: CallbackQuery):
    await handle_subscription(callback, 3)

@callback_router.callback_query(F.data == 'buyvpn_6')
async def buyvpn_6_cb(callback: CallbackQuery):
    await handle_subscription(callback, 6)


@callback_router.callback_query(F.data == 'connect')
async def trial_shadowsocks_cb(callback: CallbackQuery):
    text = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è üëá\n' \
           '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º Vless'
    await handle_message_edit(callback, text, user_keyboards.get_connect_kb())

# @callback_router.callback_query(F.data == 'chose_device')
# async def chose_device(callback: CallbackQuery):
#     text = f'{callback.from_user.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∏–∂–µ üëá —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é'
#     await handle_message_edit(callback, text, user_keyboards.get_chose_device_kb())

@callback_router.callback_query(F.data.startswith('device_'))
async def device_connect(callback: CallbackQuery):
    device = callback.data.split('_')[-1]
    user_id = callback.from_user.id

    DEVICE_URLS = {
        "iphone": {
            "device": "iPhone",
            "download_url": "https://app.hiddify.com/ios",
            "connect_url": f"https://apps.artydev.ru/?url=hiddify://import/{SUB_URL}/{encode(user_id)}#Vox%20VPN",
        },
        "android": {
            "device": "Android",
            "download_url": "https://app.hiddify.com/play",
            "connect_url": f"https://apps.artydev.ru/?url=hiddify://import/{SUB_URL}/{encode(user_id)}#Vox%20VPN",
        },
        "windows": {
            "device": "Windows",
            "download_url": "https://app.hiddify.com/windows",
            "connect_url": f"https://apps.artydev.ru/?url=hiddify://import/{SUB_URL}/{encode(user_id)}#Vox%20VPN",
        },
        "macos": {
            "device": "MacOS",
            "download_url": "https://app.hiddify.com/mac",
            "connect_url": f"https://apps.artydev.ru/?url=hiddify://import/{SUB_URL}/{encode(user_id)}#Vox%20VPN",
        },
        # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–¥–µ—Å—å
    }
    urls = DEVICE_URLS[device]
    text = f"–ü–æ–¥–ª—é—á–∫–µ–Ω–∏–µ –∫ VOX VPN –¥–ª—è {urls['device']}" \
           "\n–í–∞–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—Å–µ–≥–æ 2 —à–∞–≥–∞:" \
           "\n\n1. –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–π–¥—è –ø–æ –∫–Ω–æ–ø–∫–µ" \
           "\n\n2. –ù–∞–∂–∏–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü–û–î–ö–õ–Æ–ß–ò–¢–¨–°–Ø¬ª" \
           "\n\nüö® <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç 3 –¥–Ω—è!</b>" \
           "\n\n–ü–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞, –≤—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞ –º–µ—Å—è—Ü –∏ VPN –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–∏—Ç—Å—è –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å."


    await handle_message_edit(callback, text, user_keyboards.get_device_kb(urls["download_url"], urls["connect_url"] ))



@callback_router.callback_query(F.data == 'vless')
async def trial_vless_cb(callback: CallbackQuery):
    text = 'ü™ê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VPN:' \
           '\n' \
           '\n–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:' \
           f'\n‚îî<code>{SUB_URL}/{encode(callback.from_user.id)}</code>' \
           '\n–ù–∞–∂–º–∏—Ç–µ (—Ç–∞–ø–Ω–∏—Ç–µ) —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ' \
           '\n' \
           '\n–ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å <b>–±—ã—Å—Ç—Ä—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º</b>' \
           '\n- <a href="https://apps.apple.com/us/app/streisand/id6450534064">Streisand</a> - –¥–ª—è iOS üçè' \
           '\n- <a href="https://play.google.com/store/apps/details?id=com.v2ray.ang">v2rayNG</a> - –¥–ª—è Android ü§ñ' \
           '\n' \
           '\n–ü–æ–¥–∫–ª—é—á–∏—Ç—å –≤ <b>1 –∫–ª–∏–∫!</b>' \
           f'\n<a href="https://apps.artydev.ru/?url=streisand://import/{SUB_URL}/{encode(callback.from_user.id)}#Nock%20VPN">iOS</a>' \
           f'\n<a href="https://apps.artydev.ru/?url=v2rayng://install-config?url={SUB_URL}/{encode(callback.from_user.id)}">Android</a>' \
           '\n' \
           '\n‚≠êÔ∏è –ï—Å–ª–∏ —É –≤–∞—Å Android(v2rayNG) - –Ω–∞–∂–º–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ "..." - –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' \
           '\n' \
           '\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é üëá'
    await handle_message_edit(callback, text, user_keyboards.get_vless_con_kb())


@callback_router.message(F.content_type == 'video')
async def get_file_id(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º file_id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
    file_id = message.video.file_id
    await message.reply(f"–í–∞—à file_id: {file_id}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ
@callback_router.callback_query(lambda callback: callback.data in ['video_ios', 'video_mac', 'video_win', 'video_android'])
async def send_video(callback: types.CallbackQuery):
    try:
        # –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
        video_data = {
            'video_ios': {
                'file_id': 'BAACAgQAAxkBAAIBOmcaHKmob-v6srPRPIM16-Il2YYmAAIkGAACmHxpUHQBCLbNDQn9NgQ',
                'caption': "–í–∏–¥–µ–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è IOS üçè"
            },
            'video_mac': {
                'file_id': 'BAACAgQAAxkBAAIBPWcaHRElJOlM15LVME9Sa2w5X1MyAALbFQACmr6wUHidqln6cqO-NgQ',
                'caption': "–í–∏–¥–µ–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è mac OS"
            },
            'video_win': {
                'file_id': 'BAACAgIAAxkBAAMiZxj65u4ZxQldw3Sxg3H7KxL2-v0AAvJVAAJcmMlIyZHuytJiyn82BA',
                'caption': "–í–∏–¥–µ–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Windows"
            },
            'video_android': {
                'file_id': 'BAACAgIAAxkBAAMiZxj65u4ZxQldw3Sxg3H7KxL2-v0AAvJVAAJcmMlIyZHuytJiyn82BA',
                'caption': "–í–∏–¥–µ–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Android"
            }
        }

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        video_info = video_data.get(callback.data, {})
        file_id = video_info.get('file_id')
        caption = video_info.get('caption', "–í–∏–¥–µ–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –æ–¥–∏–Ω–∞–∫–æ–≤–∞
        keyboard = user_keyboards.get_support_kb()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
        if file_id:
            await callback.message.answer_video(
                video=file_id,
                caption=caption
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –ø–æ—Å–ª–µ –≤–∏–¥–µ–æ
            await callback.message.answer(
                text='üåê –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º ???\n\n‚ùóÔ∏è–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –º—ã —Ä–∞–±–æ—Ç–∞–µ–º 24/7 üëá',
                reply_markup=keyboard
            )
        else:
            await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.")

    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")


# /sub/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMTExMSIsImFjY2VzcyI6InN1YnNjcmlwdGlvbiIsImlhdCI6MTcxNjQwOTE0Nn0.0JnskQ2WHt_JEj6v5xUzD85-vjcHzi1eF92IyS4URug
# /sub/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMTExMSIsImFjY2VzcyI6InN1YnNjcmlwdGlvbiIsImlhdCI6MTcxNjQxMDA5OX0.7MjY1IDfK1T97zSUrWH-e42ySV3mreD_lSL4qYnkJNc


# @callback_router.callback_query(F.data.startswith('outline'))
# async def trial_shadowsocks_cb(callback: CallbackQuery):
#     text = 'ü™ê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Outline VPN:' \
#            '\n\n<code>ssconf://users.outline.artydev.ru/conf/959fc2d1ec5e0x1af70d27#nRomania</code>' \
#             '\nüëÜ –ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å!' \
#            '\n\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å üëâ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é (https://telegra.ph/Podklyuchenie-k-Outline-VPN-08-11)'
#
#     await callback.message.edit_text(text=text, reply_markup=user_keyboards.get_connected_kb(), parse_mode='HTML',disable_web_page_preview=True)




# @callback_router.callback_query(F.data.startswith('trial_shadowsocks_'))
# async def trial_shadowsocks_cb(callback: CallbackQuery):
#     country_id = callback.data.split('_')[-1]
#     print(f'{country_id}')
#     if country_id == "nl":
#         panel = Marzban(os.getenv("MARZH_LOGIN"), os.getenv("MARZH_PWD"), "https://vm13139.vpsone.xyz")
#         token = await panel.get_token()
#         expire_time = datetime.utcnow() + timedelta(days=1)  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ 1 –¥–µ–Ω—å
#         expire_timestamp = int(expire_time.timestamp())
#         user = User(
#             username="new_user",  # –ó–∞–¥–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#             proxies={
#                 "shadowsocks": {}
#             },
#             inbounds={"shadowsocks": ["Shadowsocks TCP"]},  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è Shadowsocks
#             expire=expire_timestamp,  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
#             data_limit=1024 * 1024 * 1024 * 15,  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
#             data_limit_reset_strategy="no_reset",  # –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
#             status="active"  # –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         )
#
#         result = await panel.add_user(user=user, token=token)
#
#         await callback.message.edit_text(text=result.links[0], reply_markup=await user_keyboards.get_trial_shadowsocks_countries_kb())

