from aiogram import F, Router, types, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile
from bot.keyboards import user_keyboards
from aiogram.filters import CommandStart, Command
import os
from bot.utils import marzhapi
import asyncio
callback_router = Router()
from bot.utils.base64coding import encode
from dotenv import load_dotenv
from bot.utils.yoomonepay import create_payment
import logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv('../.env')
SUB_URL = os.getenv("SUB_URL")
TOKEN = os.getenv("TOKEN_TG")
bot = Bot(token=TOKEN)


user_last_interaction = {}
async def handle_message_edit(callback: CallbackQuery, new_text: str, new_reply_markup):
    user_id = callback.from_user.id
    current_time = asyncio.get_event_loop().time()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    if user_id in user_last_interaction:
        last_time = user_last_interaction[user_id]
        if current_time - last_time < .5:  # –ù–∞–ø—Ä–∏–º–µ—Ä, 1 —Å–µ–∫—É–Ω–¥–∞
            await callback.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º.")
            return

    user_last_interaction[user_id] = current_time

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –µ–≥–æ —Ä–∞–∑–º–µ—Ç–∫–∞
    if callback.message.text != new_text or callback.message.reply_markup != new_reply_markup:
        await callback.message.edit_text(text=new_text, reply_markup=new_reply_markup, parse_mode='HTML', disable_web_page_preview=True)
    else:
        await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@callback_router.message(CommandStart())
async def cmd_start(message: types.Message):
    try:
        # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é (file_id)
        image_path = "AgACAgQAAxkBAAIBamdU23ZiPgSLkqOIZrRXLYXBznSnAAJ-xjEb8PmgUo683NEpncO2AQADAgADeQADNgQ"

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_path} —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.")

        create_user_result = await marzhapi.crate_user(message.from_user.id)  # —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–Ω–µ–ª–µ VPN
        if create_user_result['status'] == 'ok':
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
            group_message = (
                f'üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è!\n'
                f'–ò–º—è: {message.from_user.first_name}\n'
                f'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}\n'
                f'Username: @{message.from_user.username}'
            )
            await bot.send_message(chat_id=-1002286289168, text=group_message)
        text = '<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VOX VPN!</b>' \
               '\n\n–ú—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º <b>—Å—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</b> –∏ <b>–≤—ã—Å–æ–∫—É—é —Å–∫–æ—Ä–æ—Å—Ç—å</b> –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.' \
               '\n\n<b>–û–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç ‚Äî –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö:</b> VPN –∏–¥–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –Ω–∞ <b>—Ç–µ–ª–µ—Ñ–æ–Ω–µ</b>, —Ç–∞–∫ –∏ –Ω–∞ <b>–ü–ö.</b>' \
               '\n\n<b>–ü–æ–≥–Ω–∞–ª–∏!</b>' \
               '\n\n<b>üîπ –ü–æ–¥–¥–µ—Ä–∂–∫–∞</b> @voxwork' \
               '\nüîπ <b>–û—Ç–∑—ã–≤—ã</b> @voxglobal' \
               '\nüî∏ <b>–ü—Ä–æ—Ñ–∏–ª—å</b> /profile' \
               '\n\n<b>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,</b>' \
               '\n<b>–ö–æ–º–∞–Ω–¥–∞ VOX VPN</b> ‚ö°Ô∏è'
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer_photo(photo=image_path, caption=text, reply_markup=user_keyboards.main_menu(), parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start.")


@callback_router.message(Command('profile'))
async def cmd_start(message: types.Message):
    user_info = await marzhapi.get_user_info(message.from_user.id)
    image_path = "AgACAgQAAxkBAAIBamdU23ZiPgSLkqOIZrRXLYXBznSnAAJ-xjEb8PmgUo683NEpncO2AQADAgADeQADNgQ"
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.")
    if user_info["subscription_status"] == 'active':
        sub_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞"
    elif user_info["subscription_status"] == 'disabled' or 'expired':
        sub_status = "‚ùå –ù–µ –∞–∫—Ç–∏–≤–Ω–∞"

    else:
        sub_status = "‚ùì –ù–µ–∏–∑–≤–µ—Ç—Å–Ω–∞ –æ—à–∏–±–∫–∞"

    text = f'<b>–ü–æ–¥–ø–∏—Å–∫–∞: {sub_status}</b>\n' \
           f'‚îú ID: {message.from_user.id}\n' \
           f'‚îú –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {user_info["remaining_days"]}\n' \
           f'‚îî –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ: {user_info["expire_date"]}'  # ‚îú‚îî
    await message.answer_photo(photo=image_path, caption=text, reply_markup=user_keyboards.get_profile_kb(),
                                        parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@callback_router.callback_query(F.data.in_(['buyvpn', 'chose_device','back_to_menu']))
async def handle_button_click(callback: types.CallbackQuery):
    try:
        action = callback.data
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ: {action}")

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.delete()
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        # –õ–æ–≥–∏—Ä—É–µ–º, –∫–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        if action == 'buyvpn':
            image_path = "AgACAgQAAxkBAAIBamdU23ZiPgSLkqOIZrRXLYXBznSnAAJ-xjEb8PmgUo683NEpncO2AQADAgADeQADNgQ"
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_path} —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏ VPN.")
            await callback.message.answer_photo(photo=image_path, reply_markup=user_keyboards.get_buyvpn_kb())
        elif action == 'chose_device':
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ VPN.")

            text = f'{callback.from_user.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∏–∂–µ üëá —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é'
            await callback.message.answer(text=text, reply_markup=user_keyboards.get_chose_device_kb())
        elif action == 'back_to_menu':
            image_path = "AgACAgQAAxkBAAIBamdU23ZiPgSLkqOIZrRXLYXBznSnAAJ-xjEb8PmgUo683NEpncO2AQADAgADeQADNgQ"
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é.")
            text = '<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VOX VPN!</b>' \
               '\n\n–ú—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º <b>—Å—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</b> –∏ <b>–≤—ã—Å–æ–∫—É—é —Å–∫–æ—Ä–æ—Å—Ç—å</b> –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.' \
               '\n\n<b>–û–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç ‚Äî –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö:</b> VPN –∏–¥–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –Ω–∞ <b>—Ç–µ–ª–µ—Ñ–æ–Ω–µ</b>, —Ç–∞–∫ –∏ –Ω–∞ <b>–ü–ö.</b>' \
               '\n\n<b>–ü–æ–≥–Ω–∞–ª–∏!</b>' \
               '\n\n<b>üîπ –ü–æ–¥–¥–µ—Ä–∂–∫–∞</b> @voxwork' \
               '\nüîπ <b>–û—Ç–∑—ã–≤—ã</b> @voxglobal' \
               '\nüî∏ <b>–ü—Ä–æ—Ñ–∏–ª—å</b> /profile' \
               '\n\n<b>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,</b>' \
               '\n<b>–ö–æ–º–∞–Ω–¥–∞ VOX VPN</b> ‚ö°Ô∏è'
            await callback.message.answer_photo(photo=image_path, caption=text, reply_markup=user_keyboards.main_menu(),
                                                parse_mode="HTML")
        elif action == 'profile':
            user_info = await marzhapi.get_user_info(callback.from_user.id)
            image_path = "AgACAgQAAxkBAAIBamdU23ZiPgSLkqOIZrRXLYXBznSnAAJ-xjEb8PmgUo683NEpncO2AQADAgADeQADNgQ"
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.")
            if user_info["subscription_status"] == 'active':
                sub_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞"
            elif user_info["subscription_status"] == 'disabled' or 'expired':
                sub_status = "‚ùå –ù–µ –∞–∫—Ç–∏–≤–Ω–∞"

            else:
                sub_status = "‚ùì –ù–µ–∏–∑–≤–µ—Ç—Å–Ω–∞ –æ—à–∏–±–∫–∞"

            text = f'<b>–ü–æ–¥–ø–∏—Å–∫–∞: {sub_status}</b>\n' \
                   f'‚îú ID: {callback.from_user.id}\n' \
                   f'‚îú –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {user_info["remaining_days"]}\n' \
                   f'‚îî –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ: {user_info["expire_date"]}'  # ‚îú‚îî
            await callback.message.answer_photo(photo=image_path, caption=text, reply_markup=user_keyboards.get_profile_kb(),
                                                parse_mode="HTML")
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        # await callback.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {action}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")


async def handle_subscription(callback: CallbackQuery, months: int):
    user_id = callback.from_user.id
    try:
        await callback.message.delete()
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    logger.info(f"–§—É–Ω–∫—Ü–∏—è handle_subscription")
    if months == 1:
        month_text = "–º–µ—Å—è—Ü"
    elif 2 <= months <= 4:
        month_text = "–º–µ—Å—è—Ü–∞"
    elif months == 7:
        month_text = "–º–µ—Å—è—Ü–∞"
    else:
        month_text = "–º–µ—Å—è—Ü–µ–≤"

    text = f'‚ÑπÔ∏è –î–æ—Å—Ç—É–ø –Ω–∞ {months} {month_text}.'
    transfer_url = "https://t.me/voxwork"
    payment_link = await create_payment(user_id,months)
    await callback.message.answer(text=text, reply_markup=user_keyboards.get_payment_kb(payment_link, transfer_url))


@callback_router.callback_query(F.data.startswith('test_payment_'))
async def test_payment_cb(callback: CallbackQuery):
    months = int(callback.data.split('_')[-1])
    if months == 1:
        month_text = "–º–µ—Å—è—Ü"
    elif months == 3:
        month_text = "–º–µ—Å—è—Ü–∞"
    elif months == 6:
        month_text = "–º–µ—Å—è—Ü–µ–≤"
    else:
        month_text = "–º–µ—Å—è—Ü–µ–≤"

    await marzhapi.extend_expire(callback.from_user.id,months)

    text = f'–û–ø–ª–∞—Ç–∞ –∑–∞ {months} {month_text} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É.'
    await handle_message_edit(callback, text, user_keyboards.get_mainmenu_kb())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@callback_router.callback_query(F.data == 'buyvpn_1')
async def buyvpn_1_cb(callback: CallbackQuery):
    await handle_subscription(callback, 1)


@callback_router.callback_query(F.data == 'buyvpn_3')
async def buyvpn_3_cb(callback: CallbackQuery):
    await handle_subscription(callback, 3)


@callback_router.callback_query(F.data == 'buyvpn_6')
async def buyvpn_6_cb(callback: CallbackQuery):
    await handle_subscription(callback, 6)


@callback_router.callback_query(F.data == 'buyvpn_7')
async def buyvpn_6_cb(callback: CallbackQuery):
    await handle_subscription(callback, 7)


@callback_router.callback_query(F.data.startswith('device_'))
async def device_connect(callback: CallbackQuery):
    device = callback.data.split('_')[-1]
    user_id = callback.from_user.id

    DEVICE_URLS = {
        "iphone": {
            "device": "iPhone",
            "download_url": "https://app.hiddify.com/ios",
            "connect_url": f"https://app.nockserv.cloud/?url=hiddify://import/{SUB_URL}/{encode(user_id)}#Vox%20VPN",
        },
        "android": {
            "device": "Android",
            "download_url": "https://app.hiddify.com/play",
            "connect_url": f"https://app.nockserv.cloud/?url=hiddify://import/{SUB_URL}/{encode(user_id)}#Vox%20VPN",
        },
        "windows": {
            "device": "Windows",
            "download_url": "https://app.hiddify.com/windows",
            "connect_url": f"https://app.nockserv.cloud/?url=hiddify://import/{SUB_URL}/{encode(user_id)}#Vox%20VPN",
        },
        "macos": {
            "device": "MacOS",
            "download_url": "https://app.hiddify.com/mac",
            "connect_url": f"https://app.nockserv.cloud/?url=hiddify://import/{SUB_URL}/{encode(user_id)}#Vox%20VPN",
        },
        # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–¥–µ—Å—å
    }
    urls = DEVICE_URLS[device]
    text = f"<b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VOX VPN –¥–ª—è {urls['device']} –∑–∞ 2 —à–∞–≥–∞:</b>" \
           "\n\n1. <b>–°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.</b> " \
           "\n–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É VPN-–ø—Ä–æ—Ñ–∏–ª–µ–π." \
           "\n\n2. <b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü–û–î–ö–õ–Æ–ß–ò–¢–¨–°–Ø¬ª.</b>" \
           "\n\nüö® <b>–ü–µ—Ä–≤—ã–µ 7 –¥–Ω–µ–π ‚Äì –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!</b>" \
           "\n\nüí¨ –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: @voxwork"

    await handle_message_edit(callback, text, user_keyboards.get_device_kb(urls["download_url"], urls["connect_url"] ))


@callback_router.message(F.content_type == 'video')
async def get_file_id(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º file_id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
    file_id = message.video.file_id
    await message.reply(f"–í–∞—à file_id: {file_id}")


@callback_router.callback_query(F.data == 'instruction')
async def handle_connect(callback: CallbackQuery):
    logging.debug(f"instruction")
    try:
        await callback.message.delete()
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    try:
        file_id = 'BAACAgQAAxkBAAIHNmdz0HhbelJBxB-wkP__aL8D_mEoAAJbFgACQUCYUxGufhvsFKLcNgQ'
        await callback.message.answer_video(video=file_id,
                                            reply_markup=user_keyboards.get_instruction_kb())
    except:
        await callback.message.answer(
            text=f'–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
            parse_mode='HTML'
        )

